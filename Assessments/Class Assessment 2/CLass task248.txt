#ifndef DYNARR_H_INCLUDED
#define DYNARR_H_INCLUDED

template <class T>

class dynArr
{
private:
    T *data;
    int size;
public:
    dynArr();
    dynArr(int);
    ~dynArr();
    void  setValue(int, T);
    T getValue(int);
};


#endif // DYNARR_H_INCLUDED


#include <iostream>
#include "dynArr.h"

using namespace std;


template <class T>
dynArr <T>:: dynArr()
{
    data = NULL;
    size = 0;
}
template <class T>
dynArr <T>:: dynArr(int s)
{
    data = new int [s];
    size = s;
}
template <class T>
dynArr <T>:: ~dynArr()
{
    delete[] data;
}
template <class T>
void dynArr <T>:: setValue(int index, T values)
{
    data[index] = values;
}
template <class T>
T dynArr <T>:: getValue(int index)
{
    return data[index];
}





#include <iostream>
#include "dynArr.h"

using namespace std;

int main()
{
    dynArr <double> obj1();
    dynArr <double> obj2(5);
    dynArr <double> obj3();



    double input;
    cout<<"Enter 5 values:"<<endl;
    for(int i = 0; i<5 ; i++)
    {
        cout<<"Element "<< i+1<<": ";
        cin>>input;
        obj2.setValue(i, input);
    }

    cout<<"Your entered array is: ";
    for(int i = 0; i<5 ; i++)
    {
        cout<<obj3.getValue(i)<<" ";

    }


    return 0;
}
